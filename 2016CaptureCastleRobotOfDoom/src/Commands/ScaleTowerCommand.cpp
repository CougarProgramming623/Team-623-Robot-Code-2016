// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "ScaleTowerCommand.h"

ScaleTowerCommand::ScaleTowerCommand() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void
ScaleTowerCommand::Initialize() {
	time(&lastTime);
	time(&currentTime);
}

// Called repeatedly when this Command is scheduled to run
void
ScaleTowerCommand::Execute() {
	if(distanceTravelled >= 1.75 || counter >= MAX_REVOLUTIONS) { // Meters
		isRunning = true;
		return;
	}
	RobotMap::scaleTower->Set(1);

	dt = difftime(time(&currentTime) , lastTime);
	time (&lastTime);
	double acceleration = Robot::robot->getAcceleration() * GRAVITY;
	velocity += acceleration * dt; // v = v0 + a * t
	distanceTravelled += velocity * dt + acceleration * dt * dt; // d = d0 + v0*t + a*t^2
	counter += RobotMap::heightCounter->GetTriggerState() ? 1 : 0;
}

// Make this return true when this Command no longer needs to run execute()
bool
ScaleTowerCommand::IsFinished() {
	return isRunning;
}

// Called once after isFinished returns true
void
ScaleTowerCommand::End() {
	RobotMap::scaleTower->Set(0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void
ScaleTowerCommand::Interrupted() {

}
