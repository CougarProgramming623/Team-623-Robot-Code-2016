// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#ifndef ROBOTMAP_H
#define ROBOTMAP_H

#include "WPILib.h"
#include "AnalogGyro.h"
#include <Relay.h>
#include "Robot.h"
#include "Subsystems/PositionSubsystem.h"

#define AUTO_LOW_BAR 7
#define AUTO_SPY_BOX 8
#define AUTO_NOT_LOW_BAR 9

#define FRONT_RIGHT 7
#define FRONT_LEFT 5
#define BACK_RIGHT 6
#define BACK_LEFT 8

#define SPINNER_CW 2
#define SPINNER_CCW 3

#define PORT_SAD 4
#define SCALE_TOWER 1

//Relays
#define ARMS_UP_AND_OUT 0
#define SPINNER_SPRING_WINDER 1

//Sensors
#define PORT_GYRO 0
#define PORT_POTENTIOMETER 1
#define PORT_ULTRASONIC_PING 6
#define PORT_ULTRASONIC_ECHO 7

//Rev Counters
//#define USE_TWO_REV_COUNTERS

#ifdef USE_TWO_REV_COUNTERS

#define PORT_REV_COUNTER_LEFT 5
#define PORT_REV_COUNTER_RIGHT 0
#define METERS_PER_REV_LEFT 0
#define METERS_PER_REV_RIGHT 0

#else

#define PORT_REV_COUNTER 5
#define FEET_PER_REV (0.472)     //TODO: GET meters per rev

#endif

//Limit Switches
#define L_SPINNER_SPRING_WINDER 2
#define L_SAD_POS_UPPERBOUND 4
#define L_SAD_POS_BASELINE 3

//Height Counter (pulses)
#define HEIGHT_COUNTER 4

/**
 *The RobotMap is a mapping from the ports sensors and actuators are wired into
 *to a variable name. This provides flexibility changing wiring, makes checking
 *the wiring easier and significantly reduces the number of magic numbers
 *floating around.
 */
class RobotMap {
	public:
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
		static SpeedController *robotDriveTreadRightFront;
		static SpeedController *robotDriveTreadRightBack;
		static SpeedController *robotDriveTreadLeftFront;
		static SpeedController *robotDriveTreadLeftBack;

		static SpeedController *ballShooterSpinnerClockwise;
		static SpeedController *ballShooterSpinnerCounterclockwise;
		static SpeedController *shooterAimingDevice; // SAD = Shooter Aiming Device

		static Relay *ballShooterSpinnerSpringWinder;
		static Relay *armsUpAndOut;

		static SpeedController *scaleTower;

		static RobotDrive *robotDrive41;
		static PositionSubsystem *positionSubsystem;

		static AnalogPotentiometer *potentiometer;
		static BuiltInAccelerometer *accelerometer;

		static DigitalOutput *ultrasonicPing;
		static AnalogInput *ultrasonicEcho;

		static DigitalInput *limitSpinnerSpringWinder;
		static DigitalInput *limitSADPosBaseline;
		static DigitalInput *heightCounter;

		//Rev Counter
#ifdef USE_TWO_REV_COUNTERS
		static DigitalInput *revCounterInputLeft;
		static DigitalInput *revCounterInputRight;
		static int revCounterLeft;
		static int revCounterRight;
#else
		static DigitalInput *revCounterInput;
		static int revCounter;
#endif
		static bool oldRevState;

		static DigitalInput *autoLowBar;
		static DigitalInput *autoSpyBox;
		static DigitalInput *autoNotLowBar;
		static int autoSelector;

		static AnalogGyro *gyro;
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

		static void
		init();
		static double
		degreeToPotentiometer(double);
		static double
		radianToPotentiometer(double);
		static double
		potentiometerToDegree(double);
		static double
		potentiometerToRadian(double);
		static double
		getUlrasonicFeet();
		static double
		getUlrasonicMeters();
#ifdef USE_TWO_REV_COUNTERS
		static void
		resetRevCounters();
		static void
		updateRevCounters();
		static double
		getTotalDistanceTravelled();
		static double
		getDistanceTravelledLeft();
		static double
		getDistanceTravelledRight();
#else
		static void
		resetRevCounter();
		static void
		updateRevCounter();
		static double
		getDistanceTravelled();
#endif
};

#endif
